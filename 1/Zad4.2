{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "668dfd5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import cvxpy as cp\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import linprog\n",
    "\n",
    "data = pd.read_csv(\"data01.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a86e9003",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a: 0.7177723577235772, b: 2.334570731707317\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = data['x']\n",
    "y = data['y']\n",
    "n = len(x)  # Number of data points\n",
    "\n",
    "c = np.concatenate(([0, 0], np.ones(n)))  # Coefficients for a, b are 0, and 1 for each e_i\n",
    "\n",
    "# Inequality constraints matrix\n",
    "A_ub = np.vstack([np.column_stack([x, np.ones(n), -np.eye(n)]), \n",
    "                  np.column_stack([-x, -np.ones(n), -np.eye(n)])])\n",
    "\n",
    "# Inequality constraints vector\n",
    "b_ub = np.concatenate([y, -y])\n",
    "\n",
    "# Bounds for each variable (a, b unrestricted; e_i >= 0)\n",
    "bounds = [(None, None), (None, None)] + [(0, None) for _ in range(n)]\n",
    "\n",
    "# Solve the linear programming problem\n",
    "result_linprog_corrected = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')\n",
    "\n",
    "# Extract the results for a and b\n",
    "a_LP, b_LP = result_linprog_corrected.x[:2]\n",
    "\n",
    "# Display the results\n",
    "print(f\"a: {a_LP}, b: {b_LP}\")\n",
    "\n",
    "plt.scatter(data['x'], data['y'], 2, color='red')\n",
    "plt.plot(data['x'], data['x'] * a_LP + b_LP, 1, color='green')\n",
    "plt.xlim(0, 10)\n",
    "plt.ylim(0, 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6152d106",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
